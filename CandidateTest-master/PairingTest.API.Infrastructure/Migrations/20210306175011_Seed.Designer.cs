// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PairingTest.API.Infrastructure.Data;

namespace PairingTest.API.Infrastructure.Migrations
{
    [DbContext(typeof(PairingTestDBContext))]
    [Migration("20210306175011_Seed")]
    partial class Seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PairingTest.API.Core.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Geography Questions"
                        });
                });

            modelBuilder.Entity("PairingTest.API.Core.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("QuestionnaireTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 1L,
                            QuestionnaireTitle = "What is the capital of Cuba?"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = 1L,
                            QuestionnaireTitle = "What is the capital of France?"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = 1L,
                            QuestionnaireTitle = "What is the capital of Poland?"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryId = 1L,
                            QuestionnaireTitle = "What is the capital of Germany?"
                        });
                });

            modelBuilder.Entity("PairingTest.API.Core.Entities.QuestionOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("QuestionID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionID");

                    b.ToTable("QuestionOption");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsCorrectAnswer = true,
                            OptionText = "Havana",
                            QuestionID = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsCorrectAnswer = false,
                            OptionText = "Paris",
                            QuestionID = 1L
                        },
                        new
                        {
                            Id = 3L,
                            IsCorrectAnswer = false,
                            OptionText = "Warsaw",
                            QuestionID = 1L
                        },
                        new
                        {
                            Id = 4L,
                            IsCorrectAnswer = false,
                            OptionText = "Berlin",
                            QuestionID = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsCorrectAnswer = false,
                            OptionText = "Havana",
                            QuestionID = 2L
                        },
                        new
                        {
                            Id = 6L,
                            IsCorrectAnswer = true,
                            OptionText = "Paris",
                            QuestionID = 2L
                        },
                        new
                        {
                            Id = 7L,
                            IsCorrectAnswer = false,
                            OptionText = "Warsaw",
                            QuestionID = 2L
                        },
                        new
                        {
                            Id = 8L,
                            IsCorrectAnswer = false,
                            OptionText = "Berlin",
                            QuestionID = 2L
                        },
                        new
                        {
                            Id = 9L,
                            IsCorrectAnswer = false,
                            OptionText = "Havana",
                            QuestionID = 3L
                        },
                        new
                        {
                            Id = 10L,
                            IsCorrectAnswer = false,
                            OptionText = "Paris",
                            QuestionID = 3L
                        },
                        new
                        {
                            Id = 11L,
                            IsCorrectAnswer = true,
                            OptionText = "Warsaw",
                            QuestionID = 3L
                        },
                        new
                        {
                            Id = 12L,
                            IsCorrectAnswer = false,
                            OptionText = "Berlin",
                            QuestionID = 3L
                        },
                        new
                        {
                            Id = 13L,
                            IsCorrectAnswer = false,
                            OptionText = "Havana",
                            QuestionID = 4L
                        },
                        new
                        {
                            Id = 14L,
                            IsCorrectAnswer = false,
                            OptionText = "Paris",
                            QuestionID = 4L
                        },
                        new
                        {
                            Id = 15L,
                            IsCorrectAnswer = false,
                            OptionText = "Warsaw",
                            QuestionID = 4L
                        },
                        new
                        {
                            Id = 16L,
                            IsCorrectAnswer = true,
                            OptionText = "Berlin",
                            QuestionID = 4L
                        });
                });

            modelBuilder.Entity("PairingTest.API.Core.Entities.Question", b =>
                {
                    b.HasOne("PairingTest.API.Core.Entities.Category", "QuestionCategory")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionCategory");
                });

            modelBuilder.Entity("PairingTest.API.Core.Entities.QuestionOption", b =>
                {
                    b.HasOne("PairingTest.API.Core.Entities.Question", "QuestionOptionQuestion")
                        .WithMany("QuestionOption")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionOptionQuestion");
                });

            modelBuilder.Entity("PairingTest.API.Core.Entities.Category", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("PairingTest.API.Core.Entities.Question", b =>
                {
                    b.Navigation("QuestionOption");
                });
#pragma warning restore 612, 618
        }
    }
}
